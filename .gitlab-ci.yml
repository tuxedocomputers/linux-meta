default:
    # Custom docker image: ubuntu:focal with git, dpkg-dev, and devscripts preinstalled.
    image: linux-meta-builder-ubuntu

    before_script:
        # git, dpkg-dev, and devscripts already installed on linux-meta-builder-ubuntu docker image,
        # but manual installation required on runners that only have ubuntu:focal available.
        # - apt-get update
        # - DEBIAN_FRONTEND=noninteractive apt-get install -y git dpkg-dev devscripts debhelper kmod

        # Configure git to be able to push.
        - git config --global user.name "Tuxedo BOT"
        - git config --global user.email "tux@tuxedocomputers.com"
        - gpg --import $TUXEDO_BOT_GPG_PRIVATE_KEY

        # Setup author for dch.
        - export DEBFULLNAME="Tuxedo BOT"
        - export DEBEMAIL="tux@tuxedocomputers.com"

variables:
    # Create a fresh clone every time, instead of caching the last checkout of the repository. This
    # is required for a clean slate the way the auto-update script expects.
    GIT_STRATEGY: clone

stages:
    # The update job is not run on the same commit as the build, and deploy jobs. It's included in this
    # explicit order here purely to make the CI script more readable.
    - update
    - build
    - deploy

update:
    stage: update

    only:
        # Don't run on every push, but only manually issued and periodically.
        - web
        - schedule

    script:
        # GitLab CI checks out in a detached head state, correct this to be able to push.
        - git checkout $CI_COMMIT_BRANCH

        # Run the logic determining the new version, update, and push the result.
        - ./auto-update

        # Push using a GitLab Personal Access Token.
        - git push "https://${TUXEDO_BOT_GITLAB_USERNAME}:${TUXEDO_BOT_GITLAB_CI_PERSONAL_ACCESS_TOKEN}@${CI_REPOSITORY_URL#*@}" "HEAD:${CI_COMMIT_REF_NAME}"
        - git push "https://${TUXEDO_BOT_GITLAB_USERNAME}:${TUXEDO_BOT_GITLAB_CI_PERSONAL_ACCESS_TOKEN}@${CI_REPOSITORY_URL#*@}" "HEAD:${CI_COMMIT_REF_NAME}" --tags

build:
    stage: build

    only:
        # Build after new tag has been pushed.
        - tags

    script:
        # Setup environment and create packages.
        - ./build

        # Copy results into build directory so that the artifacts keyword can pick them up.
        - mkdir -p output
        - mv ../*.build ../*.buildinfo ../*.changes ../*.deb ../*.dsc ../*.tar.xz output

    artifacts:
        # Save build results.
        paths:
            - output

deploy:
    stage: deploy

    only:
        # Build after new tag has been pushed.
        - tags

    script:
        # Get version number.
        - CURRENT_VERSION=$(grep -Pom1 '(?<=^linux-meta-tuxedo-20.04 \().*(?=\))' debian/changelog)

        # Upload to new folder on internal Nextcould.
        - curl -X MKCOL $TUXEDO_BOT_WEBDAV_LINUX_META_BASE_FOLDER_URL/$CURRENT_VERSION --user $TUXEDO_BOT_NEXTCLOUD_USERNAME:$TUXEDO_BOT_NEXTCLOUD_PASSWORD
        - find output/* -exec curl -T '{}' $TUXEDO_BOT_WEBDAV_LINUX_META_BASE_FOLDER_URL/$CURRENT_VERSION/ --user $TUXEDO_BOT_NEXTCLOUD_USERNAME:$TUXEDO_BOT_NEXTCLOUD_PASSWORD \;
