include:
  - project: 'tuxedocomputers/development/gitlab-ci-scripts'
    ref: kernel-ci-20.04
    file: '/common-deploy.yml'

default:
    # Custom docker image: ubuntu:focal with git, dpkg-dev, and devscripts preinstalled.
    image: linux-builder-focal

    before_script:
        # git, dpkg-dev, and devscripts already installed on linux-meta-builder-ubuntu docker image,
        # but manual installation required on runners that only have ubuntu:focal available.
        # - apt-get update
        # - DEBIAN_FRONTEND=noninteractive apt-get install -y git dpkg-dev devscripts debhelper kmod

        # Configure git to be able to push.
        - git config --global user.name "Tuxedo BOT"
        - git config --global user.email "tux@tuxedocomputers.com"
        - gpg --import $TUXEDO_BOT_GPG_PRIVATE_KEY

        # Setup author for dch.
        - export DEBFULLNAME="Tuxedo BOT"
        - export DEBEMAIL="tux@tuxedocomputers.com"

        # Set token based checkout url for the internal gitlab repository, this and the public github repository are 1 to 1 mirrors on all branches used here.
        - export LINUX_REPO_URL="https://${TUXEDO_BOT_GITLAB_USERNAME}:${TUXEDO_BOT_GITLAB_CI_PERSONAL_ACCESS_TOKEN}@${LINUX_REPO_CLONE_URL_HTTPS#https://}"

variables:
    # Create a fresh clone every time, instead of caching the last checkout of the repository. This
    # is required for a clean slate the way the auto-update script expects.
    GIT_STRATEGY: clone

stages:
    # The update job is not run on the same commit as the build, and deploy jobs. It's included in this
    # explicit order here purely to make the CI script more readable.
    - update
    - build
    - deploy

update:
    stage: update

    only:
        # Don't run on every push, but only manually issued and periodically.
        - web
        - schedule
        - trigger

    script:
        # GitLab CI checks out in a detached head state, correct this to be able to push.
        - git checkout $CI_COMMIT_BRANCH

        # Run the logic determining the new version, update, and push the result.
        - ./auto-update

        # Push using a GitLab Personal Access Token.
        - git push "https://${TUXEDO_BOT_GITLAB_USERNAME}:${TUXEDO_BOT_GITLAB_CI_PERSONAL_ACCESS_TOKEN}@${CI_REPOSITORY_URL#*@}" $CI_COMMIT_BRANCH
        - git push "https://${TUXEDO_BOT_GITLAB_USERNAME}:${TUXEDO_BOT_GITLAB_CI_PERSONAL_ACCESS_TOKEN}@${CI_REPOSITORY_URL#*@}" $(git describe --tags --abbrev=0)

build:
    stage: build

    only:
        # Build after new tag has been pushed.
        - tags

    script:
        # Setup environment and create packages.
        - ./build

        # Copy results into build directory so that the artifacts keyword can pick them up.
        - mkdir -p output
        - mv ../*.build ../*.buildinfo ../*.changes ../*.deb ../*.dsc ../*.tar.xz output

    artifacts:
        # Save build results.
        paths:
            - output

deploy_to_nextcloud:
    stage: deploy

    only:
        # Build after new tag has been pushed.
        - tags

    script:
        # Get version number.
        - CURRENT_VERSION=$(grep -Pom1 '(?<=^linux-meta-tuxedo-20.04 \().*(?=\))' debian/changelog)

        # Upload to new folder on internal Nextcould.
        - curl -X MKCOL $TUXEDO_BOT_WEBDAV_LINUX_META_20_04_BASE_FOLDER_URL/$CURRENT_VERSION --user $TUXEDO_BOT_NEXTCLOUD_USERNAME:$TUXEDO_BOT_NEXTCLOUD_PASSWORD
        - find output/* -exec curl -T '{}' $TUXEDO_BOT_WEBDAV_LINUX_META_20_04_BASE_FOLDER_URL/$CURRENT_VERSION/ --user $TUXEDO_BOT_NEXTCLOUD_USERNAME:$TUXEDO_BOT_NEXTCLOUD_PASSWORD \;

# Needs to be called "deploy" to use the CI include from the top
deploy: # deploy_to_flat_apt_repo
    stage: deploy

    # Overwrite "- when: never" rule from include
    rules:
        - if: $CI_COMMIT_TAG
          when: on_success
        - when: never

    variables:
        # This job does not need a clean working directory.
        GIT_STRATEGY: fetch

    before_script:
        # Get version number.
        - CURRENT_VERSION=$(grep --perl-regexp --only-matching --max-count 1 '(?<=^linux-meta-tuxedo-20\.04 \().*(?=\))' debian/changelog)

        # Set variables for generic deploy script from CI include from the top
        - USERNAME=${FLAT_APT_REPO_UPLOAD_USER}
        - TARGETSERVER=${FLAT_APT_REPO_UPLOAD_URL}
        - TARGETDIR=${FLAT_APT_REPO_UPLOAD_PATH_20_04}/${CURRENT_VERSION}

        # Create flat apt repository meta information
        - cd output
        - dpkg-scanpackages . /dev/null | xz -9 > Packages.xz

    # "script:" is implemented in CI include from the top
